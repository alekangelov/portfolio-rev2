/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { forwardRef, Ref, useRef } from "react";
import { Float, useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { Depth, Fresnel, LayerMaterial } from "lamina";
import type { Group } from "three";
import { GroupProps } from "@react-three/fiber";
import { mergeRefs } from "utils";
import { useTransition, a } from "@react-spring/three";

const InnerMaterial = ({ speed = 10, gradient = 0.7 }) => {
  return (
    <LayerMaterial toneMapped={false} side={THREE.FrontSide}>
      <Depth
        colorA="#ff0080"
        colorB="black"
        alpha={1}
        mode="normal"
        near={0.5 * gradient}
        far={0.5}
        origin={[0, 0, 0]}
      />
      <Depth
        colorA="blue"
        colorB="#f7b955"
        alpha={1}
        mode="add"
        near={2 * gradient}
        far={2}
        origin={[1, 1, 1]}
      />
      <Depth
        colorA="green"
        colorB="#f7b955"
        alpha={1}
        mode="add"
        near={3 * gradient}
        far={3}
        origin={[-1, -1, -1]}
      />
      <Depth
        colorA="white"
        colorB="red"
        alpha={1}
        mode="overlay"
        near={1.5 * gradient}
        far={1.5}
        origin={[1, -1, -1]}
      />
      <Fresnel
        mode="add"
        color="white"
        intensity={0.75}
        power={2}
        bias={0.05}
      />
    </LayerMaterial>
  );
};

const OuterMaterial = new THREE.MeshStandardMaterial({
  color: "#292929",
  roughness: 0,
  side: THREE.DoubleSide,
});

const useMeshes = (active = true) => {
  const { nodes } = useGLTF("/bust2/bust.gltf") as any;
  if (!active) return [];
  return [
    {
      position: [0.67, 0.79, 0.24],
      mesh: {
        geometry: nodes.Object_2_cell105.geometry,
      },
      mesh2: {
        geometry: nodes.Object_2_cell105_1.geometry,
        children: <InnerMaterial />,
      },
    },
    {
      position: [0.59, 3.77, -0.36],
      mesh: {
        geometry: nodes.Object_2_cell106.geometry,
      },
      mesh2: {
        geometry: nodes.Object_2_cell106_1.geometry,
        children: <InnerMaterial />,
      },
    },
    {
      position: [-0.36, 5.09, 0.05],
      mesh: {
        geometry: nodes.Object_2_cell099.geometry,
      },
      mesh2: {
        geometry: nodes.Object_2_cell099_1.geometry,
        children: <InnerMaterial />,
      },
    },
    {
      position: [-0.18, 3.23, 0.49],
      mesh: {
        geometry: nodes.Object_2_cell102.geometry,
      },
      mesh2: {
        geometry: nodes.Object_2_cell102_1.geometry,
        children: <InnerMaterial />,
      },
    },
    {
      position: [-0.54, 1.25, -0.21],
      mesh: {
        geometry: nodes.Object_2_cell103.geometry,
      },
      mesh2: {
        geometry: nodes.Object_2_cell103_1.geometry,
        children: <InnerMaterial />,
      },
    },
  ];
};

const Geometry = ({ position, mesh, mesh2, ...props }: any) => {
  console.log({ position, mesh, mesh2, props });
  return (
    <Float>
      <a.group position={position} scale={props.scale} dispose={null}>
        <a.mesh geometry={mesh.geometry} material={OuterMaterial} />
        <a.mesh {...mesh2} />
      </a.group>
    </Float>
  );
};

function Model({ ...props }: GroupProps, ref: Ref<Group>) {
  const group = useRef<Group>(null);
  const meshes = useMeshes();
  const transition = useTransition(meshes, {
    from: {
      scale: 0,
    },
    enter: {
      scale: 1,
    },
    leave: {
      scale: 0,
    },
    trail: 100,
    config: {
      mass: 5,
    },
  });
  return (
    <group ref={mergeRefs([group, ref])} {...props} dispose={null}>
      {transition(({ scale }, { position, mesh, mesh2 }, key) => {
        return (
          <Geometry
            key={key}
            position={position}
            mesh={mesh}
            mesh2={mesh2}
            scale={scale}
          />
        );
      })}
    </group>
  );
}

useGLTF.preload("/bust2/bust.gltf");

export default forwardRef(Model);
