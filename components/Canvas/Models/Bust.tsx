/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { forwardRef, Ref, useEffect, useMemo, useRef } from "react";
import { Float, useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import { Depth, Fresnel, LayerMaterial } from "lamina";
import type { Group } from "three";
import { GroupProps } from "@react-three/fiber";
import { mergeRefs } from "@utils";
import { useTransition, a, useSpring, to } from "@react-spring/three";
import { useTimeout } from "usehooks-ts";

const InnerMaterial = ({ speed = 10, gradient = 0.7 }) => {
  return (
    <LayerMaterial toneMapped={false} side={THREE.FrontSide}>
      <Depth
        colorA="#ff0080"
        colorB="black"
        alpha={1}
        mode="normal"
        near={0.5 * gradient}
        far={0.5}
        origin={[0, 0, 0]}
      />
      <Depth
        colorA="blue"
        colorB="#f7b955"
        alpha={1}
        mode="add"
        near={2 * gradient}
        far={2}
        origin={[1, 1, 1]}
      />
      <Depth
        colorA="green"
        colorB="#f7b955"
        alpha={1}
        mode="add"
        near={3 * gradient}
        far={3}
        origin={[-1, -1, -1]}
      />
      <Depth
        colorA="white"
        colorB="red"
        alpha={1}
        mode="overlay"
        near={1.5 * gradient}
        far={1.5}
        origin={[1, -1, -1]}
      />
      <Fresnel
        mode="add"
        color="white"
        intensity={0.75}
        power={2}
        bias={0.05}
      />
    </LayerMaterial>
  );
};

const OuterMaterial = new THREE.MeshStandardMaterial({
  color: "#292929",
  roughness: 0.5,
  side: THREE.DoubleSide,
  bumpScale: 0.01,
});

const useMeshes = (active = true) => {
  const { nodes } = useGLTF("/bust2/bust.gltf") as any;
  const meshes = useMemo(
    () => [
      {
        position: [0.67, 0.79, 0.24],
        mesh: {
          geometry: nodes.Object_2_cell105.geometry,
        },
        mesh2: {
          geometry: nodes.Object_2_cell105_1.geometry,
          children: <InnerMaterial />,
        },
      },
      {
        position: [0.59, 3.77, -0.36],
        mesh: {
          geometry: nodes.Object_2_cell106.geometry,
        },
        mesh2: {
          geometry: nodes.Object_2_cell106_1.geometry,
          children: <InnerMaterial />,
        },
      },
      {
        position: [-0.36, 5.09, 0.05],
        mesh: {
          geometry: nodes.Object_2_cell099.geometry,
        },
        mesh2: {
          geometry: nodes.Object_2_cell099_1.geometry,
          children: <InnerMaterial />,
        },
      },
      {
        position: [-0.18, 3.23, 0.49],
        mesh: {
          geometry: nodes.Object_2_cell102.geometry,
        },
        mesh2: {
          geometry: nodes.Object_2_cell102_1.geometry,
          children: <InnerMaterial />,
        },
      },
      {
        position: [-0.54, 1.25, -0.21],
        mesh: {
          geometry: nodes.Object_2_cell103.geometry,
        },
        mesh2: {
          geometry: nodes.Object_2_cell103_1.geometry,
          children: <InnerMaterial />,
        },
      },
    ],
    [nodes]
  );
  if (!active) return [];
  return meshes;
};

const Geometry = ({ position, mesh, mesh2, scale, ...props }: any) => {
  const [{ scale: scaleSpring }, set] = useSpring(() => ({
    scale: 1,
  }));
  const bump = useTexture("/images/concrete.jpeg");
  return (
    <Float speed={2}>
      <a.mesh
        {...props}
        scale={to([scaleSpring, scale], (s1, s2) => {
          return s1 * s2;
        })}
        onPointerEnter={() => set({ scale: 1.2 })}
        onPointerLeave={() => set({ scale: 1 })}
        position={position}
        dispose={null}
      >
        <a.mesh
          geometry={mesh.geometry}
          material={OuterMaterial}
          material-bumpMap={bump}
        />
        <a.mesh {...mesh2} />
      </a.mesh>
    </Float>
  );
};

function Model({ ...props }: GroupProps, ref: Ref<Group>) {
  const group = useRef<Group>(null);
  const [active, setActive] = React.useState(false);
  const meshes = useMeshes(active);
  useTimeout(() => setActive(true), 1000);
  const transition = useTransition(meshes, {
    from: {
      scale: 0,
    },
    enter: {
      scale: 1,
    },
    leave: {
      scale: 0,
    },
    trail: 100,
  });
  return (
    <group ref={mergeRefs([group, ref])} {...props} dispose={null}>
      <pointLight
        distance={30}
        intensity={0.5}
        position={[0, 5, 3]}
        color="#e92fab"
        castShadow
      />
      <pointLight
        distance={15}
        intensity={10}
        position={[10, 10, -5]}
        color="#0059ff"
        castShadow
      />
      <pointLight
        intensity={20}
        distance={12}
        position={[10, 5, 5]}
        color="white"
        castShadow
      />
      <pointLight
        intensity={40}
        distance={10.5}
        position={[-10, 5, 5]}
        color="white"
        castShadow
      />
      {transition(({ scale }, { position, mesh, mesh2 }, key) => {
        return (
          <Geometry
            key={key}
            position={position}
            mesh={mesh}
            mesh2={mesh2}
            scale={scale}
          />
        );
      })}
    </group>
  );
}

useGLTF.preload("/bust2/bust.gltf");

export default forwardRef(Model);
