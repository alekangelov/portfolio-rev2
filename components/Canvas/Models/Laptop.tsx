/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {
  MutableRefObject,
  Ref,
  RefObject,
  useEffect,
  useLayoutEffect,
  useRef,
} from "react";
import {
  Float as FFloat,
  Html,
  Mask,
  Text,
  useGLTF,
  useHelper,
  useMask,
} from "@react-three/drei";
import { Group } from "three";
import { GroupProps, useFrame } from "@react-three/fiber";
import { animated, useSpring } from "@react-spring/three";
import { a, useSpring as useSpring2 } from "@react-spring/web";
import { useBoolean } from "usehooks-ts";
import * as THREE from "three";
import { fontPaths } from "styles/fonts";
import { Example } from "components/Example";

const Float = animated(FFloat);

const useFloat = ({
  group,
  open,
}: {
  group: RefObject<Group>;
  open: boolean;
}) => {
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    if (!group.current) return;
    group.current.rotation.x = THREE.MathUtils.lerp(
      group.current.rotation.x,
      open ? Math.cos(t / 10) / 10 + 0.25 : 0,
      0.1
    );
    group.current.rotation.y = THREE.MathUtils.lerp(
      group.current.rotation.y,
      open ? Math.sin(t / 10) / 4 : 0,
      0.1
    );
    group.current.rotation.z = THREE.MathUtils.lerp(
      group.current.rotation.z,
      open ? Math.sin(t / 10) / 10 : 0,
      0.1
    );
    group.current.position.y = THREE.MathUtils.lerp(
      group.current.position.y,
      open ? (5 + Math.sin(t)) / 10 + 0 : 0,
      0.1
    );
  });
};

const AppleLogo = new THREE.MeshPhongMaterial({
  color: "black",
});

export default function Laptop({ ...props }: GroupProps) {
  const { value: open, toggle: toggleOpen } = useBoolean(false);
  const {
    value: hovered,
    setFalse: setHoveredFalse,
    setTrue: setHoveredTrue,
  } = useBoolean(false);
  const { hinge } = useSpring({
    hinge: open ? 1.5 : 3.13,
  });
  const { opacity } = useSpring2({
    opacity: open ? 1 : 0,
  });
  const group = useRef<Group>(null);
  const { nodes, materials } = useGLTF("/laptop/laptop.gltf") as any;
  const stencil = useMask(1, true);
  const screen = useRef<THREE.Mesh>(null);
  useFloat({
    group,
    open,
  });
  useLayoutEffect(() => {
    if (!screen.current) return;
    screen.current.material = Object.assign(screen.current.material, stencil);
  }, []);
  useEffect(() => {
    document.body.style.cursor = hovered ? "pointer" : "auto";
  }, [hovered]);
  const light = useRef(null);
  useHelper(light, THREE.PointLightHelper, 0.2, "white");
  return (
    <group position={[0, -3, -5]} scale={3}>
      <pointLight
        ref={light}
        color="white"
        position={[4, 2, 2]}
        distance={30}
        intensity={20}
        castShadow
      />
      <pointLight
        ref={light}
        color="blue"
        position={[-4, 3, -2]}
        distance={30}
        intensity={5}
        castShadow
      />

      <group
        onPointerEnter={setHoveredTrue}
        onPointerLeave={setHoveredFalse}
        onClick={(e) => {
          e.stopPropagation();
          toggleOpen();
        }}
        ref={group}
        {...props}
        dispose={null}
      >
        <group position={[0, 0.52, 0]} scale={0.1}>
          <mesh
            castShadow
            geometry={nodes.Circle001.geometry}
            material={materials["Frame.001"]}
          />
          <mesh
            castShadow
            geometry={nodes.Circle001_1.geometry}
            material={materials["Frame.001"]}
          />
          <mesh
            castShadow
            geometry={nodes.Circle001_2.geometry}
            material={materials.HeadPhoneHole}
          />
          <mesh
            castShadow
            geometry={nodes.Circle001_3.geometry}
            material={materials.USB_C_INSIDE}
          />
          <mesh
            castShadow
            geometry={nodes.Circle001_4.geometry}
            material={materials["Frame.001"]}
          />
          <mesh
            castShadow
            geometry={nodes.Circle001_5.geometry}
            material={materials.TouchbarBorder}
          />
          <mesh
            castShadow
            geometry={nodes.Circle001_6.geometry}
            material={materials.Keyboard}
          />
          <group position={[0, -0.51, 0]} scale={5.8}>
            <mesh
              castShadow
              geometry={nodes.Circle006.geometry}
              material={materials["Frame.001"]}
            />
            <mesh
              castShadow
              geometry={nodes.Circle006_1.geometry}
              material={materials.USB_C_INSIDE}
            />
          </group>
          <mesh
            castShadow
            geometry={nodes.FrontCameraRing001.geometry}
            material={materials["CameraRIngBlack.002"]}
            position={[-0.15, 19.57, -16.15]}
            scale={5.8}
          />
          <group position={[-11.79, -0.15, -8.3]} scale={5.8}>
            <mesh
              castShadow
              geometry={nodes.Circle.geometry}
              material={materials["Keyboard.001"]}
            />
            <mesh
              castShadow
              geometry={nodes.Circle_1.geometry}
              material={materials.Key}
            />
            <mesh
              castShadow
              geometry={nodes.Circle_2.geometry}
              material={materials.Touchbar}
            />
          </group>
          <mesh
            castShadow
            geometry={nodes.KeyboardKeyHole.geometry}
            material={materials["Keyboard.001"]}
            position={[-11.79, -0.15, -8.3]}
            scale={5.8}
          />
          <mesh
            castShadow
            geometry={nodes.RubberFoot.geometry}
            material={materials.DarkRubber}
            position={[-11.95, -0.75, 7.86]}
            scale={5.8}
          />
          <group position={[0.01, -0.21, -10.56]} scale={5.8}>
            <mesh
              castShadow
              geometry={nodes.Circle012.geometry}
              material={materials.HingeBlack}
            />
            <mesh
              castShadow
              geometry={nodes.Circle012_1.geometry}
              material={materials.HingeMetal}
            />
          </group>
          <group position={[-15.03, 0.03, 0.6]} scale={5.8}>
            <mesh
              castShadow
              geometry={nodes.Circle009.geometry}
              material={materials["Frame.001"]}
            />
            <mesh
              castShadow
              geometry={nodes.Circle009_1.geometry}
              material={materials.SpeakerHole}
            />
          </group>
          <group position={[12.2, 0.03, 0.6]} scale={5.8}>
            <mesh
              castShadow
              geometry={nodes.Circle003.geometry}
              material={materials["Frame.001"]}
            />
            <mesh
              castShadow
              geometry={nodes.Circle003_1.geometry}
              material={materials.SpeakerHole}
            />
          </group>
          <animated.group
            position={[0.01, -0.47, -10.41]}
            rotation={hinge.to((e) => [e, 0, 0]) as any}
            scale={5.8}
          >
            <mesh
              castShadow
              geometry={nodes.Circle002.geometry}
              material={materials["Frame.001"]}
            />
            <group>
              <mesh
                castShadow
                geometry={nodes.Circle002_1.geometry}
                material={materials.Screen}
                ref={screen}
              />
              <Mask
                id={0}
                colorWrite={false}
                depthWrite={false}
                geometry={nodes.Circle002_1.geometry}
                position={[0, 0.1, -1.9]}
                rotation={[-Math.PI / 2, 0, 0]}
                castShadow
                receiveShadow
              >
                <Html transform center scale={0.2} occlude>
                  <Example />
                </Html>
              </Mask>
            </group>
            <mesh
              castShadow
              geometry={nodes.Circle002_2.geometry}
              material={materials.ScreenGlass}
            />
            <mesh
              castShadow
              geometry={nodes.Circle002_3.geometry}
              material={materials.Rubber}
            />
            <mesh
              castShadow
              geometry={nodes.Circle002_4.geometry}
              material={materials.DisplayGlass}
            />
            <mesh
              castShadow
              geometry={nodes.AppleLogo000.geometry}
              material={AppleLogo}
              position={[0, -0.12, -1.8]}
              rotation={[-Math.PI, 0, -Math.PI]}
              scale={0.58}
            />
          </animated.group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/laptop.gltf");
